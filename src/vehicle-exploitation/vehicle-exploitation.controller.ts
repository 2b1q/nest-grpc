import { Controller, OnModuleInit, Logger } from '@nestjs/common';
import { Client, ClientGrpc, GrpcMethod } from '@nestjs/microservices';
import { grpcVehicleOptions } from 'src/grpc.client';

import {
  Vehiclhe,
  Driver,
  Snapshot,
  SnapshotData,
  OperationResult,
  VehicleService,
} from './interfaces/vehicle.xploitation.interface';
import { VehicleExploitationService } from './vehicle-exploitation.service';

@Controller('vehicle-exploitation')
export class VehicleExploitationController implements OnModuleInit {
  // inject VehicleExploitationService dependencies trough constructor
  constructor(private vehicleExploitationService: VehicleExploitationService) {}

  // implement vehicle proto file
  @Client(grpcVehicleOptions)
  private readonly client: ClientGrpc;

  private vehicleService: VehicleService;
  private logger = new Logger('VehicleExploitationController');
  private logData(method, data) {
    this.logger.log(
      `call method: ${method} with data  ${JSON.stringify(data)}`,
    );
  }

  // on module init hook => wires up gRPC servece 'VehicleExploitationService'
  onModuleInit() {
    this.vehicleService = this.client.getService<VehicleService>(
      'VehicleExploitationService',
    );
  }

  // TODO - add AUTH
  // TODO - add validation
  @GrpcMethod('VehicleExploitationService')
  addVehicle(req: Vehiclhe): OperationResult {
    this.logData('addVehicle', req);
    return this.vehicleExploitationService.addVehicle(req);
  }

  // TODO - add AUTH
  // TODO - add validation
  @GrpcMethod('VehicleExploitationService')
  addSnapshot(req: Snapshot): OperationResult {
    this.logData('addSnapshot', req);
    return this.vehicleExploitationService.addSnapshot(req);
  }
}
