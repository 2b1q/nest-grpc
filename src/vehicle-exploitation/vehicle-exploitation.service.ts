import { Model } from 'mongoose';
import { Injectable, Logger, HttpException, HttpStatus } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';

import * as uuid from 'uuid/v4';

import {
  Vehicle,
  OperationResult,
  Snapshot,
  UUID,
} from './interfaces/vehicle.xploitation.interface';

@Injectable()
export class VehicleExploitationService {
  // inject the Snapshot and Vehicle mongoose models/schemas
  // to the VehicleExploitationService using the @InjectModel() decorator
  constructor(
    @InjectModel('Snapshot') private readonly snapshotModel: Model<Snapshot>,
    @InjectModel('Vehicle') private readonly vehicleModel: Model<Vehicle>,
  ) {}

  private logger = new Logger('VehicleExploitationService');
  private logData(method, data) {
    this.logger.warn(
      `call method: ${method} with data  ${JSON.stringify(data)}`,
    );
  }

  async addVehicle(vehicle: Vehicle): Promise<UUID> {
    this.logData('AddVehicle', vehicle);
    vehicle.id = uuid();
    const newVehicle = new this.vehicleModel(vehicle);
    try {
      newVehicle.save();
      this.logger.log('vehicle saved successfully in mongoDB');
    } catch (error) {
      this.logger.error(error);
      throw new HttpException('Bad payload', HttpStatus.BAD_REQUEST);
    }
    return {
      id: uuid(),
    };
  }

  async addSnapshot(snapshot: Snapshot): Promise<OperationResult> {
    this.logData('AddSnapshot', snapshot);
    const newSnapshot = new this.snapshotModel(snapshot);
    try {
      await newSnapshot.save();
      this.logger.log('snapshot saved successfully in mongoDB');
    } catch (error) {
      this.logger.error(error);
      throw new HttpException('Bad payload', HttpStatus.BAD_REQUEST);
    }
    return { status: true };
  }
}
