import { Model } from 'mongoose';
import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';

import * as uuid from 'uuid/v4';

import {
  Vehicle,
  OperationResult,
  Snapshot,
  UUID,
} from './interfaces/vehicle.xploitation.interface';

@Injectable()
export class VehicleExploitationService {
  // inject the Snapshot and Vehicle mongoose models/schemas
  // to the VehicleExploitationService using the @InjectModel() decorator
  constructor(
    @InjectModel('Snapshot') private readonly snapshotModel: Model<Snapshot>,
    @InjectModel('Vehicle') private readonly vehicleModel: Model<Vehicle>,
  ) {}

  // TODO revrite to mongo storage
  // inMemory data: Vehiclhe, Snapshot
  private snapshot: Snapshot;
  private logger = new Logger('VehicleExploitationService');
  private logData(method, data) {
    this.logger.warn(
      `call method: ${method} with data  ${JSON.stringify(data)}`,
    );
  }

  // async create(createCatDto: CreateCatDto): Promise<Cat> {
  //   const createdCat = new this.catModel(createCatDto);
  //   return await createdCat.save();
  // }

  async addVehicle(vehicle: Vehicle): Promise<UUID | Error> {
    this.logData('AddVehicle', vehicle);
    vehicle.id = uuid();
    const newVehicle = new this.vehicleModel(vehicle);
    try {
      newVehicle.save();
    } catch (error) {
      throw new Error(error);
    }
    return {
      id: uuid(),
    };
  }
  addSnapshot(snapshot: Snapshot): OperationResult {
    this.logData('AddSnapshot', snapshot);
    this.snapshot = snapshot;
    return { status: true };
  }
}
