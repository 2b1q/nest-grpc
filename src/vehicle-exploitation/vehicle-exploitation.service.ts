import { Model } from 'mongoose';
import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';

import * as uuid from 'uuid/v4';

import {
  Vehiclhe,
  OperationResult,
  Snapshot,
} from './interfaces/vehicle.xploitation.interface';

@Injectable()
export class VehicleExploitationService {
  constructor(
    @InjectModel('Snapshot') private readonly snapshotModel: Model<Snapshot>,
    @InjectModel('Vehicle') private readonly vehicleModel: Model<Vehiclhe>,
  ) {}

  // TODO revrite to mongo storage
  // inMemory data: Vehiclhe, Snapshot
  private vehicle: Vehiclhe;
  private snapshot: Snapshot;
  private logger = new Logger('VehicleExploitationService');
  private logData(method, data) {
    this.logger.warn(
      `call method: ${method} with data  ${JSON.stringify(data)}`,
    );
  }

  addVehicle(vehicle: Vehiclhe): any {
    this.logData('AddVehicle', vehicle);
    this.vehicle = vehicle;
    return {
      id: uuid(),
    };
  }
  addSnapshot(snapshot: Snapshot): OperationResult {
    this.logData('AddSnapshot', snapshot);
    this.snapshot = snapshot;
    return { status: true };
  }
}
